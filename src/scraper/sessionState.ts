export const viewStateGenerator = '74C47CFF';

export const eventValidation = '/wEWMQKT4OK8DALE2qDWDwKS3diOCgKR38eBCwL+yJXfCQLL3dzWAwLChrRGAtzms7gMAvzzhsAEAoz497QMAte99+QBAr3W24kCAve6tbcEAvr2hLcLAur2hLcLAvX2hLcLAvT2hLcLAvf2hLcLAvb2hLcLAvH2hLcLAvD2hLcLAvP2hLcLAuL2hLcLAu32hLcLAvX2xLQLAvrHlukEAvqovIcIAu6k9YkIArPiw+EHAu7Ph/4KAu2gqZcDAv+rqg8Cs+CSggcC2+/j1A0C3Ib34gQCq+vc3A8Cs4j5tA4ChbfbigcCgrrVsAkCicXwhwkC9Zqh4g8C0Iic7QcC9KTg2gwCzvi55AQC7cT1ngQCwZT6sAMC2IWQFAKln/PuCgKgt7D9ClWhthBcEL2cin8T1FBKRYwg5+bt';

export const viewState = ``;

